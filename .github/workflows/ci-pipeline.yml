name: CI Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1

jobs:
  # Step 1: Core CI checks (run in parallel)
  ci:
    name: CI Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Run clippy
        run: cargo clippy --all-features -- -D warnings
      
      - name: Run basic tests
        run: cargo test --features cli,wasm,native-examples --verbose

  # Step 2: Integration Tests (run in parallel with CI)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install maturin
        run: pip install maturin
      
      - name: Build and install package directly
        run: |
          maturin develop --release --features python
      
      - name: Test import
        run: |
          python -c "import shlesha; print('âœ… Integration test passed')"

  # Step 3: Python builds (only after CI and Integration Tests pass)
  python:
    name: Python Builds
    runs-on: ${{ matrix.os }}
    needs: [ci, integration-tests]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  # Step 4: WASM builds (only after CI and Integration Tests pass)
  wasm:
    name: WASM Build
    runs-on: ubuntu-latest
    needs: [ci, integration-tests]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: Build WASM
        run: wasm-pack build --target web --out-dir pkg --features wasm
      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-pkg
          path: pkg

  # Step 5: Build source distribution (only after CI and Integration Tests pass)
  sdist:
    name: Source Distribution
    runs-on: ubuntu-latest
    needs: [ci, integration-tests]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist

  # Step 6: Create GitHub Release (only after builds complete)
  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [python, wasm, sdist]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: true
          prerelease: ${{ contains(github.ref, 'rc') }}

  # Step 7: Publish to PyPI (only after release created)
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc')
    environment: prd
    permissions:
      id-token: write
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  # Step 8: Publish to npm (only after release created)
  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: ${{ contains(github.ref, 'rc') && 'dev' || 'prd' }}
    steps:
      - uses: actions/checkout@v4
      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-pkg
          path: pkg
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      - name: Publish to npm
        run: |
          cd pkg
          if [[ "${GITHUB_REF}" == *"rc"* ]]; then
            npm publish --access public --tag rc
          else
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Step 9: Publish to crates.io (only after release created)
  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: ${{ contains(github.ref, 'rc') && 'dev' || 'prd' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true