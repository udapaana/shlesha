name: Python

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  workflow_run:
    workflows: ["Quality Gate", "Integration Tests"]
    types:
      - completed

env:
  PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1

jobs:
  # Test Python bindings
  test-python:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}${{ matrix.container && ' (Arch Linux)' || '' }}
    runs-on: ${{ matrix.os }}
    # Only run if:
    # - workflow_run from successful Quality Gate (for non-release commits) 
    # - workflow_run from successful Integration Tests (for release tags)
    # - manually triggered/on pull request
    if: |
      github.event_name != 'push' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && 
       ((github.event.workflow_run.name == 'Quality Gate' && !startsWith(github.event.workflow_run.head_branch, 'refs/tags/')) ||
        (github.event.workflow_run.name == 'Integration Tests' && startsWith(github.event.workflow_run.head_branch, 'refs/tags/'))))
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          # Standard platforms
          - os: ubuntu-latest
            python-version: '3.8'
          - os: ubuntu-latest
            python-version: '3.9'
          - os: ubuntu-latest
            python-version: '3.10'
          - os: ubuntu-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.12'
          - os: ubuntu-latest
            python-version: '3.13'
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.13'
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.12'
          - os: windows-latest
            python-version: '3.13'
          # Arch Linux specific tests (all Python versions)
          # These test the specific module loading issues seen on Arch Linux
          - os: ubuntu-latest
            container: archlinux:latest
            python-version: '3.8'
          - os: ubuntu-latest
            container: archlinux:latest
            python-version: '3.9'
          - os: ubuntu-latest
            container: archlinux:latest
            python-version: '3.10'
          - os: ubuntu-latest
            container: archlinux:latest
            python-version: '3.11'
          - os: ubuntu-latest
            container: archlinux:latest
            python-version: '3.12'
          - os: ubuntu-latest
            container: archlinux:latest
            python-version: '3.13'
    steps:
      - uses: actions/checkout@v4
      
      # Set up Python for Arch Linux containers differently
      - name: Install Python and uv on Arch Linux
        if: matrix.container == 'archlinux:latest'
        run: |
          # Skip system upgrade to save time
          pacman -Sy --noconfirm
          pacman -S --noconfirm python python-pip rust gcc --needed
          python --version
          pip --version
          # Install uv for better Python package management
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - uses: actions/setup-python@v5
        if: matrix.container != 'archlinux:latest'
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Rust (non-Arch)
        if: matrix.container != 'archlinux:latest'
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install uv (non-Arch)
        if: matrix.container != 'archlinux:latest'
        uses: astral-sh/setup-uv@v3
      
      - name: Install maturin and pytest
        shell: bash
        run: |
          if [ "${{ matrix.container }}" = "archlinux:latest" ]; then
            # Use uv with virtual environment on Arch Linux
            export PATH="$HOME/.cargo/bin:$PATH"
            uv venv .venv
            source .venv/bin/activate
            uv pip install maturin pytest
            echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
            echo "$PWD/.venv/bin" >> $GITHUB_PATH
          else
            # Use uv on other platforms
            uv venv .venv
            # Handle Windows vs Unix path differences
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              source .venv/Scripts/activate
              echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
              echo "$PWD/.venv/Scripts" >> $GITHUB_PATH
            else
              source .venv/bin/activate
              echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
              echo "$PWD/.venv/bin" >> $GITHUB_PATH
            fi
            uv pip install maturin pytest
          fi
      
      - name: Build wheel
        shell: bash
        run: maturin build --features python
      
      - name: Install wheel
        shell: bash
        run: |
          uv pip install target/wheels/*.whl
      
      - name: Run Python tests
        shell: bash
        run: |
          python -m pytest python/tests -v
          python -c "import shlesha; print(shlesha.__version__)"

  # Build wheels using cibuildwheel for comprehensive Python version support (3.8-3.13)
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'refs/tags/'))
    needs: [test-python]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  # Build wheels for Arch Linux (separate job for special handling)
  build-wheels-archlinux:
    name: Build wheels on Arch Linux
    runs-on: ubuntu-latest
    container: archlinux:latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'refs/tags/'))
    needs: [test-python]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies on Arch Linux
        run: |
          # Skip system upgrade to save time
          pacman -Sy --noconfirm
          pacman -S --noconfirm python python-pip rust gcc --needed
          # Install uv for better Python package management
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # Add uv to PATH immediately
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv venv .venv
          source .venv/bin/activate
          uv pip install maturin
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      
      - name: Build wheels (Arch Linux)
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          source .venv/bin/activate
          maturin build --release --out dist --features python
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-archlinux
          path: dist

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'refs/tags/'))
    needs: [test-python]
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist

  # Publish to Test PyPI (for release candidates)
  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && contains(github.ref, 'rc')
    needs: [build-wheels, build-wheels-archlinux, build-sdist, test-python]
    environment: dev
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          # No password needed - uses trusted publisher

  # Publish to production PyPI (for stable releases)
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc')
    needs: [build-wheels, build-wheels-archlinux, build-sdist, test-python]
    environment: prd
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # No password needed - uses trusted publisher