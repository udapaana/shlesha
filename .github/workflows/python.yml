name: Python

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1

jobs:
  # Test Python bindings
  test-python:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}${{ matrix.container && ' (Arch Linux)' || '' }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          # Standard platforms
          - os: ubuntu-latest
            python-version: '3.8'
          - os: ubuntu-latest
            python-version: '3.9'
          - os: ubuntu-latest
            python-version: '3.10'
          - os: ubuntu-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.12'
          - os: ubuntu-latest
            python-version: '3.13'
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.13'
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.12'
          - os: windows-latest
            python-version: '3.13'
          # Arch Linux specific tests (all Python versions)
          # These test the specific module loading issues seen on Arch Linux
          - os: ubuntu-latest
            container: archlinux:latest
            python-version: '3.8'
          - os: ubuntu-latest
            container: archlinux:latest
            python-version: '3.9'
          - os: ubuntu-latest
            container: archlinux:latest
            python-version: '3.10'
          - os: ubuntu-latest
            container: archlinux:latest
            python-version: '3.11'
          - os: ubuntu-latest
            container: archlinux:latest
            python-version: '3.12'
          - os: ubuntu-latest
            container: archlinux:latest
            python-version: '3.13'
    steps:
      - uses: actions/checkout@v4
      
      # Set up Python for Arch Linux containers differently
      - name: Install Python on Arch Linux
        if: matrix.container == 'archlinux:latest'
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm python python-pip python-wheel python-setuptools
          pacman -S --noconfirm rust cargo gcc base-devel
          python --version
          pip --version
      
      - uses: actions/setup-python@v5
        if: matrix.container != 'archlinux:latest'
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Rust (non-Arch)
        if: matrix.container != 'archlinux:latest'
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install maturin
        run: |
          if [ "${{ matrix.container }}" = "archlinux:latest" ]; then
            pip install --break-system-packages maturin pytest
          else
            pip install maturin pytest
          fi
      
      - name: Build wheel
        run: maturin build --features python
      
      - name: Install wheel
        shell: bash
        run: |
          if [ "${{ matrix.container }}" = "archlinux:latest" ]; then
            pip install --break-system-packages target/wheels/*.whl
          else
            pip install target/wheels/*.whl
          fi
      
      - name: Run Python tests
        run: |
          python -m pytest python/tests -v
          python -c "import shlesha; print(shlesha.__version__)"

  # Build wheels for all platforms and Python versions (3.8+)
  build-wheels:
    name: Build wheels on ${{ matrix.os }}${{ matrix.container && ' (Arch Linux)' || '' }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          # Arch Linux wheel builds
          # Builds wheels specifically for Arch Linux to address module loading issues
          - os: ubuntu-latest
            container: archlinux:latest
            target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v4
      
      # Set up build environment for Arch Linux
      - name: Install dependencies on Arch Linux
        if: matrix.container == 'archlinux:latest'
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm python python-pip python-wheel python-setuptools
          pacman -S --noconfirm rust cargo gcc base-devel
          pip install --break-system-packages maturin
      
      - name: Build wheels (Arch Linux)
        if: matrix.container == 'archlinux:latest'
        run: |
          maturin build --release --out dist --features python
      
      - name: Build wheels (other platforms)
        if: matrix.container != 'archlinux:latest'
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --features python
          sccache: 'true'
          manylinux: auto
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}${{ matrix.container && '-archlinux' || '' }}
          path: dist

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist

  # Publish to Test PyPI (for release candidates)
  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && contains(github.ref, 'rc')
    needs: [build-wheels, build-sdist, test-python]
    environment: dev
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          # No password needed - uses trusted publisher

  # Publish to production PyPI (for stable releases)
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc')
    needs: [build-wheels, build-sdist, test-python]
    environment: prd
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # No password needed - uses trusted publisher