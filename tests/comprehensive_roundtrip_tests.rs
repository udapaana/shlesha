use quickcheck::{quickcheck, TestResult};
use shlesha::Shlesha;

/// Comprehensive test string covering all major Devanagari features
const COMPREHENSIVE_TEST_STRING: &str = r#"
‡§Ö ‡§Ü ‡§á ‡§à ‡§â ‡§ä ‡§ã ‡•† ‡§å ‡•° ‡§è ‡§ê ‡§ì ‡§î ‡§Ö‡§Ç ‡§Ö‡§É ‡§Å ‡§º ‡•≤ ‡§ë ‡•ê ‡§Ω‡•§ ‡••
‡§ï ‡§ñ ‡§ó ‡§ò ‡§ô ‡§ö ‡§õ ‡§ú ‡§ù ‡§û ‡§ü ‡§† ‡§° ‡§¢ ‡§£ ‡§§ ‡§• ‡§¶ ‡§ß ‡§® ‡§™ ‡§´ ‡§¨ ‡§≠ ‡§Æ ‡§Ø ‡§∞ ‡§≤ ‡§µ ‡§≥ ‡§∂ ‡§∑ ‡§∏ ‡§π
‡§ï‡§º ‡§ñ‡§º ‡§ó‡§º ‡§ú‡§º ‡§°‡§º ‡§¢‡§º ‡§´‡§º ‡§Ø‡§º ‡§©
‡§ï‡•ç‡§∞ ‡§ó‡•ç‡§∞ ‡§§‡•ç‡§∞ ‡§ú‡•ç‡§û ‡§ï‡•ç‡§∑ ‡§∂‡•ç‡§∞ ‡§π‡•ç‡§® ‡§π‡•ç‡§Æ ‡§π‡•ç‡§Ø ‡§∞‡•ç‡§ï ‡§∞‡•ç‡§§ ‡§∏‡•ç‡§§ ‡§∏‡•ç‡§ï ‡§¶‡•ç‡§ò ‡§∑‡•ç‡§ü ‡§∏‡•ç‡§§‡•ç‡§∞ ‡§§‡•ç‡§§‡•ç‡§∞ ‡§§‡•ç‡§∞‡•ç‡§Ø ‡§ú‡•ç‡§û ‡§§‡•ç‡§∞‡•ç‡§Ø
‡§ß‡§∞‡•ç‡§Æ ‡§ï‡•ç‡§∑‡§§‡•ç‡§∞‡§ø‡§Ø ‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§ ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡§Ø ‡§ï‡§∞‡•ç‡§§‡•É‡§§‡•ç‡§µ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø ‡§µ‡§ø‡§∂‡•ç‡§µ ‡§∂‡•Å‡§¶‡•ç‡§ß‡§ø ‡§Æ‡•É‡§§‡•ç‡§Ø‡•Å ‡§ó‡•É‡§π‡•ç‡§Ø ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§™‡•Å‡§≥‡•ç‡§≥ ‡§´‡§≥ ‡§¨‡§æ‡§≥
‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞ ‡§´‡§º‡•ã‡§® ‡§ó‡§º‡§ú‡§º‡§≤ ‡§´‡§º‡§∞‡§ø‡§∂‡•ç‡§§‡§æ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä
‡§ï‡•ç ‡§ñ‡•ç ‡§ó‡•ç ‡§ò‡•ç ‡§ö‡•ç ‡§õ‡•ç ‡§ú‡•ç ‡§ù‡•ç ‡§ü‡•ç ‡§†‡•ç ‡§°‡•ç ‡§¢‡•ç ‡§£‡•ç ‡§§‡•ç ‡§•‡•ç ‡§¶‡•ç ‡§ß‡•ç ‡§®‡•ç ‡§™‡•ç ‡§´‡•ç ‡§¨‡•ç ‡§≠‡•ç ‡§Æ‡•ç ‡§Ø‡•ç ‡§∞‡•ç ‡§≤‡•ç ‡§µ‡•ç ‡§≥‡•ç ‡§∂‡•ç ‡§∑‡•ç ‡§∏‡•ç ‡§π‡•ç
‡§ï‡•ç‚Äç‡§∑ ‡§ï‡•ç‚Äå‡§∑ ‡§ï‡•ç‚Äå‡§§ ‡§ï‡•ç‚Äç‡§§‡•ç
‡§ï‡•ç‚Äç‡§∞‡•ç ‡§ï‡•ç‚Äå‡§∞‡•ç
‡§ï‡•ç‚Äç‡§≤‡•ç ‡§ï‡•ç‚Äå‡§≤‡•ç
‡§ï‡•ç‚Äç‡§Æ ‡§ï‡•ç‚Äå‡§Æ
‡§ï‡•ç‚Äç‡§™‡•ç ‡§ï‡•ç‚Äå‡§™‡•ç
‡§ï‡•ç‚Äç‡§¨‡•ç ‡§ï‡•ç‚Äå‡§¨‡•ç
‡§ï‡•ç‚Äç‡§¶‡•ç ‡§ï‡•ç‚Äå‡§¶‡•ç
‡§ï‡•ç‚Äç‡§ß‡•ç ‡§ï‡•ç‚Äå‡§ß‡•ç
‡§ï‡•ç‚Äç‡§® ‡§ï‡•ç‚Äå‡§®
‡§ï‡•ç‚Äç‡§Ø‡•ç ‡§ï‡•ç‚Äå‡§Ø‡•ç
‡§ï‡•ç‚Äç‡§µ‡•ç ‡§ï‡•ç‚Äå‡§µ‡•ç
‚Çπ ‡•¶ ‡•ß ‡•® ‡•© ‡•™ ‡•´ ‡•¨ ‡•≠ ‡•Æ ‡•Ø
‡•ë ‡•í ‡•ì ‡•î ‡•ï ‡•ñ ‡•ó ·≥µ ·≥∂
ëëÄ ëëÅ ëëÇ ëëÉ ëëÑ ëëÖ ëëÜ ëëá ëëà ëëâ
‡•∏ ëëã ëëå ëëç ëëé
"#;

/// Additional edge cases based on research from vidyut-lipi and aksharamukha
const EDGE_CASE_STRINGS: &[&str] = &[
    // Vedic accent combinations
    "‡§Ö‡•ë ‡§Ö‡•í ‡§Ö‡•ì ‡§á‡•ë ‡§á‡•í",
    // Complex three-consonant clusters
    "‡§∏‡•ç‡§§‡•ç‡§∞ ‡§§‡•ç‡§∞‡•ç‡§Ø ‡§ï‡•ç‡§∑‡•ç‡§£ ‡§ô‡•ç‡§ï‡•ç‡§§",
    // Malformed sequences (should be handled gracefully)
    "‡§ï‡•ç‚Äå‚Äå‡•ç‡§∞", // Multiple joiners
    "‡§∞‡•ç‚Äç‚Äç‡§ï", // Multiple ZWJ
    // Script boundary cases
    "‡§ï‡•ça",  // Devanagari + Latin
    "‡§Öa‡§¨", // Mixed script
    // Unicode normalization edge cases
    "‡§ï‡•Ä", // ka + vowel sign vs. precomposed
    "‡§ï‡§ø", // NFC vs NFD
    // Rare vowel combinations
    "‡§ï‡•¢ ‡§ï‡•£", // Vocalic L combinations
    // Extended Unicode ranges
    "ëëü ëë† ëë° ëë¢ ëë£", // Extended Devanagari
];

/// Dynamically discover all supported scripts
fn get_all_supported_scripts() -> Vec<String> {
    let shlesha = Shlesha::new();
    let scripts = shlesha.list_supported_scripts();

    // Filter to only include scripts we want to test
    scripts
        .into_iter()
        .filter(|script| {
            // Include Indic scripts and major romanization schemes
            matches!(
                script.as_str(),
                "devanagari"
                    | "bengali"
                    | "gujarati"
                    | "telugu"
                    | "tamil"
                    | "kannada"
                    | "malayalam"
                    | "odia"
                    | "gurmukhi"
                    | "iast"
                    | "iso15919"
                    | "harvard_kyoto"
                    | "slp1"
                    | "itrans"
                    | "velthuis"
            )
        })
        .collect()
}

/// Get Indic scripts (abugida) vs Roman scripts (alphabet)
fn categorize_scripts() -> (Vec<String>, Vec<String>) {
    let all_scripts = get_all_supported_scripts();
    let indic_scripts: Vec<String> = all_scripts
        .iter()
        .filter(|script| {
            matches!(
                script.as_str(),
                "devanagari"
                    | "bengali"
                    | "gujarati"
                    | "telugu"
                    | "tamil"
                    | "kannada"
                    | "malayalam"
                    | "odia"
                    | "gurmukhi"
            )
        })
        .cloned()
        .collect();

    let roman_scripts: Vec<String> = all_scripts
        .iter()
        .filter(|script| {
            matches!(
                script.as_str(),
                "iast" | "iso15919" | "harvard_kyoto" | "slp1" | "itrans" | "velthuis"
            )
        })
        .cloned()
        .collect();

    (indic_scripts, roman_scripts)
}

#[test]
fn test_comprehensive_roundtrip_all_scripts() {
    let shlesha = Shlesha::new();
    let (indic_scripts, roman_scripts) = categorize_scripts();

    println!(
        "Testing {} Indic scripts and {} Roman scripts",
        indic_scripts.len(),
        roman_scripts.len()
    );

    // Test the comprehensive string across all scripts
    for test_string in [COMPREHENSIVE_TEST_STRING]
        .iter()
        .chain(EDGE_CASE_STRINGS.iter())
    {
        test_roundtrip_for_string(&shlesha, test_string, &indic_scripts, &roman_scripts);
    }
}

fn test_roundtrip_for_string(
    shlesha: &Shlesha,
    test_string: &str,
    indic_scripts: &[String],
    roman_scripts: &[String],
) {
    let clean_string = test_string.trim();
    if clean_string.is_empty() {
        return;
    }

    println!(
        "\n=== Testing string: {} ===",
        &clean_string.chars().take(20).collect::<String>()
    );

    // Test Indic-to-Indic roundtrips
    for source_script in indic_scripts {
        for target_script in indic_scripts {
            if source_script == target_script {
                continue; // Skip identity conversions
            }

            test_single_roundtrip(shlesha, clean_string, source_script, target_script);
        }
    }

    // Test Indic-to-Roman roundtrips
    for source_script in indic_scripts {
        for target_script in roman_scripts {
            test_single_roundtrip(shlesha, clean_string, source_script, target_script);
        }
    }

    // Test Roman-to-Indic roundtrips (reverse of above)
    for source_script in roman_scripts {
        for target_script in indic_scripts {
            // Start with known good Roman text
            match shlesha.transliterate(clean_string, "devanagari", source_script) {
                Ok(roman_text) => {
                    test_single_roundtrip(shlesha, &roman_text, source_script, target_script);
                }
                Err(_) => {
                    // Skip if we can't convert to this Roman scheme
                    continue;
                }
            }
        }
    }
}

fn test_single_roundtrip(shlesha: &Shlesha, text: &str, source_script: &str, target_script: &str) {
    // Forward conversion
    let converted = match shlesha.transliterate(text, source_script, target_script) {
        Ok(result) => result,
        Err(e) => {
            // Don't fail test for unsupported script combinations, just log
            println!("  ‚ö†Ô∏è  {} ‚Üí {}: {}", source_script, target_script, e);
            return;
        }
    };

    // Backward conversion (roundtrip)
    let roundtrip = match shlesha.transliterate(&converted, target_script, source_script) {
        Ok(result) => result,
        Err(e) => {
            println!(
                "  ‚ùå {} ‚Üí {} ‚Üí {}: Forward succeeded but reverse failed: {}",
                source_script, target_script, source_script, e
            );
            return;
        }
    };

    // Compare with normalization (handle Unicode composition differences)
    let original_normalized = normalize_for_comparison(text);
    let roundtrip_normalized = normalize_for_comparison(&roundtrip);

    if original_normalized == roundtrip_normalized {
        println!(
            "  ‚úÖ {} ‚Üí {} ‚Üí {} ({})",
            source_script,
            target_script,
            source_script,
            &converted.chars().take(10).collect::<String>()
        );
    } else {
        println!(
            "  ‚ùå {} ‚Üí {} ‚Üí {}: Roundtrip failed",
            source_script, target_script, source_script
        );
        println!("     Original:  '{}'", original_normalized);
        println!("     Roundtrip: '{}'", roundtrip_normalized);
        println!("     Via:       '{}'", converted);

        // Don't panic immediately - collect all failures
    }
}

/// Normalize text for comparison (handle Unicode composition differences)
fn normalize_for_comparison(text: &str) -> String {
    // Remove whitespace differences and normalize Unicode
    text.chars()
        .filter(|c| !c.is_whitespace())
        .collect::<String>()
        .trim()
        .to_string()
}

/// Property-based test: any valid Devanagari text should roundtrip
fn prop_devanagari_roundtrip(text: String) -> TestResult {
    let shlesha = Shlesha::new();
    let (indic_scripts, _) = categorize_scripts();

    // Filter to valid Devanagari range
    let devanagari_text: String = text
        .chars()
        .filter(|c| {
            let code = *c as u32;
            // Devanagari block (U+0900-U+097F) + Extended (U+A8E0-U+A8FF)
            (code >= 0x0900 && code <= 0x097F) || (code >= 0xA8E0 && code <= 0xA8FF)
        })
        .take(50) // Limit length for test performance
        .collect();

    if devanagari_text.len() < 3 {
        return TestResult::discard();
    }

    // Test roundtrip to a few representative scripts
    for target_script in ["bengali", "gujarati", "telugu"].iter() {
        if indic_scripts.contains(&target_script.to_string()) {
            let converted =
                match shlesha.transliterate(&devanagari_text, "devanagari", target_script) {
                    Ok(result) => result,
                    Err(_) => return TestResult::discard(),
                };

            let roundtrip = match shlesha.transliterate(&converted, target_script, "devanagari") {
                Ok(result) => result,
                Err(_) => return TestResult::failed(),
            };

            let original_normalized = normalize_for_comparison(&devanagari_text);
            let roundtrip_normalized = normalize_for_comparison(&roundtrip);

            if original_normalized != roundtrip_normalized {
                return TestResult::failed();
            }
        }
    }

    TestResult::passed()
}

#[test]
fn test_property_based_roundtrips() {
    quickcheck(prop_devanagari_roundtrip as fn(String) -> TestResult);
}

/// Test virama preservation specifically (regression test for the issue we just fixed)
#[test]
fn test_virama_preservation() {
    let shlesha = Shlesha::new();
    let (indic_scripts, _) = categorize_scripts();

    // Test strings with viramas
    let virama_test_cases = [
        "‡§ß‡§∞‡•ç‡§Æ",   // Simple virama
        "‡§ï‡§∞‡•ç‡§Æ",   // Another simple case
        "‡§∏‡•ç‡§§‡•ç‡§∞",   // Complex cluster
        "‡§ï‡•ç‡§∑‡•ç‡§§‡•ç‡§∞",  // Multiple viramas
        "‡§∏‡§∞‡•ç‡§µ‡§ú‡•ç‡§û", // Real word with complex clusters
    ];

    for test_case in &virama_test_cases {
        for target_script in &indic_scripts {
            if target_script == "devanagari" {
                continue;
            }

            let converted = match shlesha.transliterate(test_case, "devanagari", target_script) {
                Ok(result) => result,
                Err(_) => continue,
            };

            // Count characters - converted should have same number as original
            // (viramas should be preserved)
            let original_chars = test_case.chars().count();
            let converted_chars = converted.chars().count();

            println!(
                "Virama test '{}' ‚Üí {} ({}): {} chars ‚Üí {} chars",
                test_case, target_script, converted, original_chars, converted_chars
            );

            // For simple cases like ‡§ß‡§∞‡•ç‡§Æ, character count should match
            if test_case.len() <= 6 {
                // Simple cases
                assert_eq!(
                    original_chars, converted_chars,
                    "Character count mismatch for '{}' ‚Üí {}: '{}' (expected {} chars, got {})",
                    test_case, target_script, converted, original_chars, converted_chars
                );
            }
        }
    }
}

/// Test that all scripts can handle the comprehensive test string
#[test]
fn test_all_scripts_handle_comprehensive_string() {
    let shlesha = Shlesha::new();
    let all_scripts = get_all_supported_scripts();
    let mut successful_conversions = 0;
    let mut total_attempts = 0;

    for source_script in &all_scripts {
        for target_script in &all_scripts {
            if source_script == target_script {
                continue;
            }

            total_attempts += 1;

            // For this test, start with Devanagari source
            let test_text = if source_script == "devanagari" {
                COMPREHENSIVE_TEST_STRING.trim().to_string()
            } else {
                // Convert from Devanagari to source script first
                match shlesha.transliterate(
                    COMPREHENSIVE_TEST_STRING.trim(),
                    "devanagari",
                    source_script,
                ) {
                    Ok(text) => text,
                    Err(_) => continue,
                }
            };

            match shlesha.transliterate(&test_text, source_script, target_script) {
                Ok(result) => {
                    successful_conversions += 1;

                    // Basic sanity checks
                    assert!(
                        !result.is_empty(),
                        "Empty result for {} ‚Üí {}",
                        source_script,
                        target_script
                    );

                    // Result should not be just question marks (indicates mapping failure)
                    let question_mark_ratio = result.chars().filter(|&c| c == '?').count() as f64
                        / result.chars().count() as f64;
                    assert!(
                        question_mark_ratio < 0.5,
                        "Too many unmapped characters ({:.1}%) for {} ‚Üí {}: '{}'",
                        question_mark_ratio * 100.0,
                        source_script,
                        target_script,
                        &result.chars().take(50).collect::<String>()
                    );
                }
                Err(e) => {
                    println!("Failed: {} ‚Üí {}: {}", source_script, target_script, e);
                }
            }
        }
    }

    let success_rate = successful_conversions as f64 / total_attempts as f64;
    println!(
        "Script conversion success rate: {}/{} ({:.1}%)",
        successful_conversions,
        total_attempts,
        success_rate * 100.0
    );

    // We should have at least 70% success rate for basic functionality
    assert!(
        success_rate >= 0.7,
        "Success rate too low: {:.1}%",
        success_rate * 100.0
    );
}
